// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  directUrl = env("DATABASE_URL_UNPOOLED")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  hashedPassword String?
  emailVerified  DateTime? @map("email_verified")
  role           UserRole  @default(USER)
  image          String?
  reservations Reservation[]

  accounts Account[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Category {
  id   String @id @default(cuid())
  name String
  description  String?
  beds Int
  
  rooms     Room[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

model Room {
  id         String   @id @default(cuid())
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id],onDelete: Cascade)

  name       String
  details  String?
  rating       Decimal?
  price        Decimal
  imageUrl     String
  reservations Reservation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}


model Reservation{
    id         String   @id @default(cuid())
     
     roomId String
     room Room @relation(fields: [roomId],references: [id],onDelete: Cascade)

     userId String
     user User @relation(fields: [userId],references: [id],onDelete:Cascade)

     startDate  DateTime
     endDate   DateTime
     totalPrice Int

     createdAt DateTime @default(now())
}
